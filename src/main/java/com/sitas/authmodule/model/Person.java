package com.sitas.authmodule.model;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import org.modelmapper.internal.bytebuddy.build.Plugin;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Collection;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString
@Schema(description = "Person details")
@Entity
@Table(name = "Person", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"id_identification_type", "identification_number"}, name = "unique_person"),
        @UniqueConstraint(columnNames = "mail", name = "unique_mail")
})
public class Person implements Serializable {
    @Schema(description = "Autogenerated Person ID")
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "person_id")
    private int personId;

    @Schema(description = "ID Type")
    @Column(name = "id_identification_type", nullable = false)
    private @NotNull int idIdentificationType;

    @Schema(description = "Identification Number")
    @Column(name = "identification_number", nullable = false, length = 20)
    private @NotNull String identificationNumber;

    @Schema(description = "First Name")
    @Column(name = "first_name", nullable = false, length = 200)
    private @NotNull String firstName;

    @Schema(description = "Last Name")
    @Column(name = "last_name", nullable = false, length = 200)
    private @NotNull String lastName;

    @Schema(description = "Genre")
    @Column(name = "genre", nullable = false, columnDefinition = "CHAR(1)")
    private @NotNull String genre;

    @Schema(description = "Birth Date")
    @Column(name = "birth_date", nullable = false, length = 10)
    private @NotNull LocalDate birthDate;

    @Schema(description = "Phone Number")
    @Column(name = "phone_number", length = 20)
    private String phoneNumber;

    @Schema(description = "Country of Residence")
    @Column(name = "country", nullable = false, length = 50)
    private @NotNull String country;

    @Schema(description = "Province of Residence")
    @Column(name = "province", nullable = false, length = 50)
    private @NotNull String province;

    @Schema(description = "City of Residence")
    @Column(name = "city", nullable = false, length = 50)
    private @NotNull String city;

    @Schema(description = "Residence Address")
    @Column(name = "residence", nullable = false, length = 200)
    private @NotNull String residence;

    @Schema(description = "e-mail")
    @Column(name = "mail", nullable = false, length = 200)
    private @NotNull String mail;

    @Schema(description = "Password")
    @Column(name = "access_key", nullable = false, length = 200)
    private @NotNull String accessKey;

//    @Schema(description = "Role")
//    @Column(name = "role")
//    private Role role;
//
//    @Override
//    public Collection<? extends GrantedAuthority> getAuthorities() {
//        return List.of(new SimpleGrantedAuthority((role.name())));
//    }
//
//    @Override
//    public String getPassword() {
//        return getAccessKey();
//    }
//
//    @Override
//    public String getUsername() {
//        return getMail();
//    }
//
//    @Override
//    public boolean isAccountNonExpired() {
//        return true;
//    }
//
//    @Override
//    public boolean isAccountNonLocked() {
//        return true;
//    }
//
//    @Override
//    public boolean isCredentialsNonExpired() {
//        return true;
//    }
//
//    @Override
//    public boolean isEnabled() {
//        return true;
//    }
}
